#!/bin/env python
# -*- coding: utf-8 -*-

from logging import getLogger
module_logger = getLogger(__name__)

import yaml

def parsed_args():
    from mutil import mopts
    from mutil.schema import Schema, And, Use, Or, Optional, SchemaError
    import json

    myhelp = """
    Usage:
      {progname} [options] [(--logfile | --logboth)] [(--debug | --nolog)]

    Options:
      -f FILE, --file=FILE  config filename [default: {progname}.cfg]
      --logcfg <filename>   python logging-cfg file of yaml
      --logfile             out put log to file  [default: False]
      --logboth             out put log to file and console  [default: False]
      --logdir DIR          out put log to file  [default: ./dir]
      --loglevel <level>    loglevel [default: 30]
      --debug               set loglevel to logging.DEBUG [default: False]
      --nolog               set loglevel to 0 [default: False]
      --help                show this message

    """
    myschema = Schema({
      '--file': Or(None, Use(open, error="Files should be readable")),
      '--logcfg': Or(None, basestring),
      '--logfile': bool,
      '--logboth': bool,
      '--logdir': basestring,
      '--loglevel': Or(None, Use(int)),
      '--debug': bool,
      '--nolog': bool,
      '--help': bool,
      })

    return mopts.parse(myhelp=myhelp, myschema=myschema, filepath=__file__)


def main(opts):
    from mutil import pp
    from mutil import mmsgen
    module_logger.debug('opts=[{0}]'.format(opts))

    
    module_logger.debug('opts=[{0}]'.format(pp.pprintf(opts)))

    msgen_cfg = yaml.load( opts.file.read() )

    msgiter = mmsgen.GenMsg(msgen_cfg)
    for i in range(10):
        print msgiter.next()

if __name__ == '__main__':
    from mutil import dictconfig
    from mutil import mlog
    import yaml

    opts = parsed_args()

    if opts.logcfg:
        conf_dict = yaml.load(open(opts.logcfg))
    else:
        logging_modules=[ __name__, 'mutil.msgen' ]
        conf_dict = mlog.gencfg(
            names = logging_modules,
            logdir = opts.logdir,
            prefix = mlog.prefix(__file__),
            postfix = 'log',
            enable_stream = not opts.logfile ,
            enable_file = opts.logboth or opts.logfile,
            level = opts.loglevel,
        )
    dictconfig.dictConfig( conf_dict )

    main(opts=opts)

